
## System & Kernel Operations

/etc/default/grub
/boot/grub2/grub.cfg

cat /proc/cmdline

systemctl [options] command [name]

- To show all available services:
systemctl list-units -t service [--all]
systemctl list-unit-files -t service [--all]

- To start (activate) one or more units (where a unit can be a service or a socket):
sudo systemctl start foo
sudo systemctl start foo.service
sudo systemctl start /path/to/foo.service

- To stop (deactivate) a service:
sudo systemctl stop foo.service

- To enable/disable a service:
sudo systemctl enable sshd.service
sudo systemctl disable sshd.service


sysctl
sysctl -a (list)
the name of a parameter matches the directory structure inside /proc/sys where it can be found.
eg.
net.ipv4.ip_forward -> /proc/sys/net/ipv4/ip_forward
so, these are equal:
sysctl net.ipv4.ip_forward = 1
echo 1 > /proc/sys/net/ipv4/ip_forward

- to modify for current session:
echo 1 > /proc/sys/net/ipv4/ip_forward
or:
sysctl -w net.ipv4.ip_forward=1

- to modify permanently:
edit /etc/sysctl.conf with
net.ipv4.ip_forward=1
or:
set .conf files inside /etc/sysctl.d:
edit /etc/sysctl.d/net.conf with
net.ipv4.ip_forward=1
net.ipv4.icmp_echo_ignore_all=1
and then:
sysctl -p


## Kernel Modules

/lib/modules/$(uname -r)/

- List, directly load/remove modules
lsmod
insmod
rmmod

- Load or unload modules, using a pre-built module database with dependency and location information.
modprobe [-r]

- Rebuild the module dependency database; needed by modprobe and modinfo:
depmod

- Display information about a module:
modinfo

- Files in the /etc/modprobe.d directory control some parameters
  that come into play when loading with modprobe. These parameters
  include module name aliases and automatically supplied options.
  You can also blacklist specific modules to avoid them being loaded.


## Devices and udev

mknod [-m mode] /dev/name <type> <major> <minor>

udev
libudev: library which allows access to information about the devices
udevd or systemd-udevd: daemon that manages the /dev directory

- utility for control and diagnostics:
udevadm

- main configuration file:
/etc/udev/udev.conf

- rules for device naming are located in:
/etc/udev/rules.d
/usr/lib/udev/rules.d

The format for a udev rule is simple:
<match><op>value [, ...] <assignment><op>value [, ... ]
eg.
$ cat /usr/lib/udev/rules.d/99-fitbit.rules
SUBSYSTEM=="usb", ATTR{idVendor}=="2687", ATTR{idProduct}=="fb01",
SYMLINK+="fitbit", MODE="0666"

- Create and implement a rule on your system that will create a symlink called myusb when a USB device is plugged in:
vi /etc/udev/rules.d/75-myusb.rules
 SUBSYSTEM=="usb", SYMLINK+="myusb"


##  System startup and shutdown

- On RHEL/CentOS systems, files in /etc/sysconfig/ are used when starting, stopping, configuring or querying system services.

- Shutdown command:
shutdown -h +10 "Shuting down in 10 minutes"
shutdown -h now
shutdown -r now
shutdown now

- GRUB
grub2-install /dev/sda

basic configuration file (RHEL/CentOS):
/boot/grub2/grub.cfg
This file is auto-generated by:
grub2-mkconfig [-o | --output=FILE]
based on configuration files located in:
/etc/grub.d
/etc/default/grub

After selecting an entry in the grub boot menu list,
one can hit 'e' to edit boot options,
or enter a pure shell to re-install or repair GRUB.

- init and systemd.
After the Linux kernel has booted,
the init program reads the /etc/inittab file
to determine the behavior for each runlevel:

id:runlevel(s):action:process

where:
- id: a unique 1-4 character identification for the entry
- runlevel(s): zero or more single characters or digit identifiers indicating
               which runlevel the action will be taken for
- action: describes the action to be taken
- process: specifies the process to be executed.

init runlevels:
0 - Halt: Shuts down system
1 - Single-User Mode: Does not configure network interfaces,
                      start daemons, or allow non-root logins
2 - Multi-User Mode: Does not configure network interfaces or start daemons.
3 - Multi-User Mode with Networking: Starts the system normally.
4 - Undefined: Not used/User-definable
5 - X11: As runlevel 3 + display manager(X)
6 - Reboot: Reboots the system

chconfig is used to query and configure what runlevels
the various system services are to run in.

On SysVinit system, the services are in:
/etc/init.d/
and can be controlled with:
service SCRIPT COMMAND [OPTIONS]

SysVinit Startup Scripts:
/etc/rc.d/

Instead of bash scripts, systemd uses .service files. In addition, systemd sorts
all daemons into their own Linux cgroups (control groups).

systemd is backward compatible with SysVinit and the concept of runlevels is
supported via runlevel targets. The telinit program is emulated to work with
runlevels.

   |Runlevel │ Target            │
   ├─────────┼───────────────────┤
   │0        │ poweroff.target   │
   ├─────────┼───────────────────┤
   │1        │ rescue.target     │
   ├─────────┼───────────────────┤
   │2, 3, 4  │ multi-user.target │
   ├─────────┼───────────────────┤
   │5        │ graphical.target  │
   ├─────────┼───────────────────┤
   │6        │ reboot.target     │
   └─────────┴───────────────────┘

2 common targets are the most common ones:
    multi-user.target: analogous to runlevel 3, Text mode
    graphical.target: analogous to runlevel 5, GUI mode with X server

Even after the Linux system is booted to a target,
you can change it to another target/runlevel.
For example, to change Linux to “multi-user” target:
# systemctl isolate multi-user.target

The command used is isolate. It starts the unit specified on the command line
and its dependencies and stop all others. This is similar to changing the runlevel
in a traditional init system using init 3.

Change the default boot target:
For example, to make “multi-user.target” the default “runlevel”, you can do:
# systemctl enable multi-user.target
# systemctl set-default multi-user.target
Next time you reboot, the default target booted to will be “multi-user”.
