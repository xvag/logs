
Security-Enhanced Linux (SELinux) is a mandatory access control (MAC) security mechanism implemented in the kernel.
Without SELinux enabled, only traditional discretionary access control (DAC) methods such as file permissions
or access control lists (ACLs) are used to control the file access of users.
Users and programs alike are allowed to grant insecure file permissions to others or, conversely,
to gain access to parts of the system that should not otherwise be necessary for normal operation.

For example:
- Administrators have no way to control users: A user could set world readable permissions on sensitive files
such as ssh keys and the directory containing such keys, customarily: ~/.ssh/
- Processes can change security properties: A user's mail files should be readable only by that user,
but the mail client software has the ability to change them to be world readable
- Processes inherit user's rights: Firefox, if compromised by a trojaned version,
could read a user's private ssh keys even though it has no reason to do so.

Essentially under the traditional DAC model, there are two privilege levels, root and user,
and no easy way to enforce a model of least-privilege. Many processes that are launched by root later
drop their rights to run as a restricted user and some processes may be run in a chroot jail
but all of these security methods are discretionary.

SELinux follows the model of least-privilege more closely. By default under a strict enforcing setting,
everything is denied and then a series of exceptions policies are written that give each element of the system
(a service, program or user) only the access required to function.
If a service, program or user subsequently tries to access or modify a file or resource not necessary
for it to function, then access is denied and the action is logged

src: https://wiki.centos.org/HowTos/SELinux


-- Three conceptual quantities:
- Contexts: Are labels to files, processes and ports.
            Examples of contexts are SELinux user, role and type.
- Rules: Describe access control in terms of contexts,
         processes, files, ports, users, etc.
- Policies: Are a set of rules that describe what system-wide
            access control decisions should be made by SELinux.

-- SELinux Modes:
- Enforcing: All SELinux code is operative and access is denied
             according to policy. All violations are audited and logged.
- Permissive: Enables SELinux code, but only audits and warns about
              operations that would be denied in enforcing mode.
- Disabled: Completely disables SELinux kernel and application code,
            leaving the system without any of its protections.

-- SELinux policy on CentOS ships with 4 forms of access control:
 - Type Enforcement (TE): Type Enforcement is the primary mechanism
                          of access control used in the targeted policy
 - Role-Based Access Control (RBAC): Based around SELinux users
             (not necessarily the same as the Linux user), but not used
             in the default configuration of the targeted policy
 - Multi-Level Security (MLS): Much more restrictive; all processes are
        placed in fine-grained security domains with particular policies.
        Not commonly used and often hidden in the default targeted policy.
 - Multi-Category Security(MCS): An extension of Multi-Level Security,
             used in the targeted policy to implement compartmentalization
             of virtual machines and containers through sVirt.


- mode and policy config file:
/etc/sysconfig/selinux -> /etc/selinux/config

- check/change modes
sestatus
getenforce
setenforce [Mode}

- Context utilities

- use -Z option to see context:
ls -Z
ps auZ

- context form: user:role:type:mls

- type context labels should end with a _t

- change context:
chcon -t etc_t somefile
chcon --reference=reffile somefile

- Newly created files inherit the context from their parent directory,
but when moving files, it is the context of the source directory which
may be preserved, which can cause problems.

- restorecon resets file contexts, based on parent directory settings:
restorecon [-Rv] /path/to/file/or/dir/

- Another issue is how to configure the default context for a newly created
directory. semanage fcontext (provided by the policycoreutils-python package)
can change and display the default context of files and directories. Note that
semanage fcontext only changes the default settings; it does not apply them to
existing objects. This requires calling restorecon afterwards:

semanage fcontext -a -t httpd_sys_content_t /virtualHosts
restorecon -RFv /virtualHosts


SELinux policy behavior can be configured at runtime without rewriting the
policy. This is accomplished by configuring SELinux Booleans, which are
policy parameters that can be enabled and disabled:

getsebool
setsebool

- check persistent boolean settings:
semanage boolean -i

- troubleshoot selinux issues:
audit2allow is a tool that generates SELinux policy rules from logs of denied
operations. A similar tool is audit2why, which translates SELinux audit
messages into a description of why the access was denied.

eg. file moved to /var/www/html/ can't be accessed due to selinux policy:

tail /var/log/messages
grep httpd /var/log/audit/audit.log | audit2allow -M mypol
semodule -i mypol.pp
sealert -l [alert-code]
or
restorecon -Rv /var/www/html/
or
chcon -t httpd_sys_content_t file.html
